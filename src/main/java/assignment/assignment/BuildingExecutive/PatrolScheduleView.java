package assignment.assignment.BuildingExecutive;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;



/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author leeyu
 */
public class PatrolScheduleView extends javax.swing.JFrame {
    private String[] columnNames = {"Checkpoint", "Schedule Time"};
    private Object[][] tableData;

    /**
     * Creates new form PatrolScheduleTable
     */
    public PatrolScheduleView() {
        List<Object[]> data = new ArrayList<>();
        try (BufferedReader br = new BufferedReader(new FileReader("src/main/java/assignment/assignment/TxtFile/PatrolSchedule.txt"))) {
            String line;
            int lineNumber = 0;
            while ((line = br.readLine()) != null) {
                if (lineNumber > 0) { // Skip first line (header row)
                    String[] splitLine = line.split(";");
                    Object[] row = new Object[2];
                    row[0] = splitLine[0];
                    row[1] = splitLine[1];
                    data.add(row);
                }
                lineNumber++;
            }
        } catch (IOException e) {
        }
        tableData = data.toArray(new Object[data.size()][2]);
        initComponents();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        newBtn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        patrolScheduleTable = new javax.swing.JTable();
        deleteBtn = new javax.swing.JButton();
        updateBtn = new javax.swing.JButton();
        backBtn = new javax.swing.JButton();

        jButton1.setText("New");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Patrol Schedule");

        newBtn.setText("New");
        newBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newBtnActionPerformed(evt);
            }
        });

        patrolScheduleTable.setModel(new javax.swing.table.DefaultTableModel(tableData, columnNames
        ));
        jScrollPane2.setViewportView(patrolScheduleTable);

        deleteBtn.setText("Delete");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        updateBtn.setText("Update");
        updateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBtnActionPerformed(evt);
            }
        });

        backBtn.setText("Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 361, Short.MAX_VALUE)
                                .addComponent(backBtn))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(132, 132, 132)
                        .addComponent(newBtn)
                        .addGap(37, 37, 37)
                        .addComponent(updateBtn)
                        .addGap(33, 33, 33)
                        .addComponent(deleteBtn)))
                .addGap(31, 31, 31))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(backBtn))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(51, 51, 51)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newBtn)
                    .addComponent(deleteBtn)
                    .addComponent(updateBtn))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void newBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newBtnActionPerformed
        // TODO add your handling code here:
        new PatrolScheduleForm().setVisible(true);
        dispose();
    }//GEN-LAST:event_newBtnActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        // TODO add your handling code here:
        // get the index of the selected row
        int selectedRow = patrolScheduleTable.getSelectedRow();

        // check if a row is selected
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a row to delete", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // confirm deletion
        int confirmDelete = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this chekcpoint?", "Confirm Deletion", JOptionPane.YES_NO_OPTION);
        if (confirmDelete == JOptionPane.NO_OPTION) {
            return;
        }

        // create a new temporary file
        File tempFile = new File("src/main/java/assignment/assignment/TxtFile/temp.txt");

        try (BufferedReader reader = new BufferedReader(new FileReader("src/main/java/assignment/assignment/TxtFile/PatrolSchedule.txt"));
             FileOutputStream fos = new FileOutputStream(tempFile);
             PrintWriter writer = new PrintWriter(fos)) {

            String line;
            int currentRow = 0;
            while ((line = reader.readLine()) != null) {
                // check if this is the selected row to delete
                if (currentRow == selectedRow+1) {
                    // skip this line
                    currentRow++;
                    continue;
                }
                // write the line to the temporary file
                writer.println(line);
                currentRow++;
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error deleting entry", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // delete the original file
        File originalFile = new File("src/main/java/assignment/assignment/TxtFile/PatrolSchedule.txt");
        if (!originalFile.delete()) {
            JOptionPane.showMessageDialog(this, "Error deleting entry", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // rename the temporary file to the original file
        if (!tempFile.renameTo(originalFile)) {
            JOptionPane.showMessageDialog(this, "Error deleting entry", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // update the table model
        DefaultTableModel model = (DefaultTableModel) patrolScheduleTable.getModel();
        model.removeRow(selectedRow);

        JOptionPane.showMessageDialog(this, "Entry deleted successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_deleteBtnActionPerformed

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        // TODO add your handling code here:
        new BuildingExecutiveMainFrame().setVisible(true);
        dispose();
    }//GEN-LAST:event_backBtnActionPerformed

    private void updateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBtnActionPerformed
        // TODO add your handling code here:
        // Get selected row index
        int row = patrolScheduleTable.getSelectedRow();
        if (row == -1) {
            JOptionPane.showMessageDialog(this, "Please select a row to update", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        // Get the data from the selected row in the table
        String checkpoint = (String) patrolScheduleTable.getValueAt(row, 0);
        String dateTime = (String) patrolScheduleTable.getValueAt(row, 1);

        // Display a dialog to allow the user to update the data
        String updatedCheckpoint = JOptionPane.showInputDialog(this, "Update checkpoint", checkpoint);
        if (updatedCheckpoint == null || updatedCheckpoint.isEmpty()) {
            return; // User clicked cancel or entered empty input, do nothing
        }

        // Validate the updated data
        if (updatedCheckpoint.contains(";")) {
            JOptionPane.showMessageDialog(this, "Please remove semicolons (;) from input", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String updatedDateTime = JOptionPane.showInputDialog(this, "Update date and time (yyyy-MM-dd HH:mm:ss)", dateTime);
        if (updatedDateTime == null || updatedDateTime.isEmpty()) {
            return; // User clicked cancel or entered empty input, do nothing
        }

        // Validate the updated datetime
        try {
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            LocalDateTime.parse(updatedDateTime, formatter);
        } catch (DateTimeParseException e) {
            JOptionPane.showMessageDialog(this, "Please enter datetime in the format: yyyy-MM-dd HH:mm:ss", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try (BufferedWriter writer = new BufferedWriter(new FileWriter("src/main/java/assignment/assignment/TxtFile/PatrolSchedule.txt"))) {
            DefaultTableModel model = (DefaultTableModel) patrolScheduleTable.getModel();

            // Write the first row 
            writer.write("Checkpoint;ScheduleTime;PatrolTime;SecurityGuardID");
            writer.newLine();

            // Loop through the other rows and write them to the file
            for (int i = 0; i < model.getRowCount(); i++) {
                if (i == row) {
                    // Update the selected row with the new data
                    writer.write(updatedCheckpoint + ";" + updatedDateTime);
                    model.setValueAt(updatedCheckpoint, i, 0); // Update the table cell with the new data
                    model.setValueAt(updatedDateTime, i, 1); // Update the table cell with the new data
                } else {
                    // Write the other rows back to the file unchanged
                    String rowCheckpoint = (String) model.getValueAt(i, 0);
                    String rowDateTime = (String) model.getValueAt(i, 1);
                    writer.write(rowCheckpoint + ";" + rowDateTime);
                }
                writer.newLine();
            }
            JOptionPane.showMessageDialog(this, "Patrol Schedule updated successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error writing to file", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_updateBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PatrolScheduleView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PatrolScheduleView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PatrolScheduleView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PatrolScheduleView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PatrolScheduleView().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backBtn;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton newBtn;
    private javax.swing.JTable patrolScheduleTable;
    private javax.swing.JButton updateBtn;
    // End of variables declaration//GEN-END:variables
}
