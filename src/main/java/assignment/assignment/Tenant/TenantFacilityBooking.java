/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package assignment.assignment.Tenant;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author TeD
 */
public class TenantFacilityBooking extends javax.swing.JFrame {

    /**
     * Creates new form Unit_management
     */
    public TenantFacilityBooking() {
        initComponents();
        getData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jRadioButton1 = new javax.swing.JRadioButton();
        TenantFacility_bookingtime1 = new javax.swing.JComboBox<>();
        TenantFacility_bookingtime2 = new javax.swing.JComboBox<>();
        FacilityName_FacilityBooking = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        tenantId = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        addBooking = new javax.swing.JButton();
        updateBooking = new javax.swing.JButton();
        startTime = new com.github.lgooddatepicker.components.TimePicker();
        jLabel1 = new javax.swing.JLabel();
        bookingDatePicker = new com.github.lgooddatepicker.components.DatePicker();
        endTime = new com.github.lgooddatepicker.components.TimePicker();
        jLabel2 = new javax.swing.JLabel();
        facilityName = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        bookingFacility = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        deleteBooking = new javax.swing.JButton();

        jRadioButton1.setText("jRadioButton1");

        TenantFacility_bookingtime1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "08:00", "08:30", "09:00", "09:30", "10:00", "10:30", "11:00", "11:30", "12:00", "12:30", "13:00", "13:30", "14:00", "14:30", "15:00", "15:30", "16:00", "16:30", "17:00", "17:30", "18:00", "18:30", "19:00", "19:30", "20:00", "20:30", "21:00", "21:30", "22:00", "22:30" }));

        TenantFacility_bookingtime2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "08:00", "08:30", "09:00", "09:30", "10:00", "10:30", "11:00", "11:30", "12:00", "12:30", "13:00", "13:30", "14:00", "14:30", "15:00", "15:30", "16:00", "16:30", "17:00", "17:30", "18:00", "18:30", "19:00", "19:30", "20:00", "20:30", "21:00", "21:30", "22:00", "22:30" }));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Facility Booking Management"));

        jLabel9.setText("Tenant ID :");

        jLabel10.setText("Facility Name :");

        tenantId.setEditable(false);

        jLabel11.setText("Booking Time : ");

        addBooking.setText("Add Booking");
        addBooking.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBookingActionPerformed(evt);
            }
        });

        updateBooking.setText("Update Booking");
        updateBooking.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBookingActionPerformed(evt);
            }
        });

        jLabel1.setText("Booking Date :");

        jLabel2.setText("To :");

        facilityName.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Badminton Court", "Basketball Court", "Football Court" }));

        bookingFacility.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Facility Booking ID", "Facility ID", "Facility Name", "Tenant ID", "Booking Date", "Start Time", "End Time"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, false, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        bookingFacility.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bookingFacilityMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(bookingFacility);

        jLabel3.setText("Booking Details");

        deleteBooking.setText("Delete Booking");
        deleteBooking.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBookingActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(addBooking)
                                .addGap(18, 18, 18)
                                .addComponent(updateBooking)
                                .addGap(18, 18, 18)
                                .addComponent(deleteBooking))
                            .addComponent(facilityName, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(startTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(endTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(bookingDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tenantId, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 814, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(17, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(tenantId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(facilityName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(bookingDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11)
                    .addComponent(endTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(updateBooking)
                    .addComponent(addBooking)
                    .addComponent(deleteBooking))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(29, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addBookingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBookingActionPerformed
        //Code to load data
        //validation for to not have a blank data
        if ((facilityName.getSelectedItem().equals("")) || (bookingDatePicker.getDate().equals("")) 
                || (startTime.getText().equals("" )) || (endTime.getText()).equals("")){
            JOptionPane.showMessageDialog(this, "Please Enter All Data");
        } else {
            //if all data field then...
            //store enter data into String array --data--
            LocalDate date = bookingDatePicker.getDate();
            String pattern = "yyyy-MM-dd";
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(pattern);
            String pickdate = formatter.format(date);
            String data [] = {tenantId.getText(), facilityName.getSelectedItem().toString(), pickdate, startTime.getText(), endTime.getText()};
            
            DefaultTableModel model = (DefaultTableModel) bookingFacility.getModel();
            //Add string array data
            model.addRow(data);
            //Successfully added message
            JOptionPane.showMessageDialog(this, "Data Added Successfully");
            getData();
            //clear text field
            facilityName.setSelectedItem("");
            bookingDatePicker.setText("");
            startTime.setText("");
            endTime.setText("");
            
        }
    }//GEN-LAST:event_addBookingActionPerformed

    private void bookingFacilityMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bookingFacilityMouseClicked
        //Set data to their textfield
        
        DefaultTableModel model = (DefaultTableModel) bookingFacility.getModel();
        
        //Set data to text field when row is selected
        String facilityname = model.getValueAt(bookingFacility.getSelectedRow(), 2).toString();
        String tenantid = model.getValueAt(bookingFacility.getSelectedRow(), 3).toString();
        String bookingdate = model.getValueAt(bookingFacility.getSelectedRow(), 4).toString();
        String starttime = model.getValueAt(bookingFacility.getSelectedRow(), 5).toString();
        String endtime = model.getValueAt(bookingFacility.getSelectedRow(), 6).toString();
        
        
        //Set to txtfield
        tenantId.setText(tenantid);
        facilityName.setSelectedItem(facilityname);
        bookingDatePicker.setText(bookingdate);
        startTime.setText(starttime);
        endTime.setText(endtime);
        
    }//GEN-LAST:event_bookingFacilityMouseClicked

    private void updateBookingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBookingActionPerformed
        DefaultTableModel model = (DefaultTableModel) bookingFacility.getModel();
        if (bookingFacility.getSelectedRowCount() == 1){
            //if single row is selected then update
            
            String facilityname = facilityName.getSelectedItem().toString();
            String tenantid = tenantId.getText();
            String bookingdate = bookingDatePicker.getText();
            String starttime = startTime.getText();
            String endtime = endTime.getText();
            
            //set updated value on table row
            model.setValueAt(facilityname, bookingFacility.getSelectedRow(), 2);
            model.setValueAt(tenantid, bookingFacility.getSelectedRow(), 3);
            model.setValueAt(bookingdate, bookingFacility.getSelectedRow(), 4);
            model.setValueAt(starttime, bookingFacility.getSelectedRow(), 5);
            model.setValueAt(endtime, bookingFacility.getSelectedRow(), 6);
            
            //update messahe display
            JOptionPane.showMessageDialog(this, "Update Successfully");
            getData();
            
        } else {
            if (bookingFacility.getRowCount() == 0){
                //if table is empty
                JOptionPane.showMessageDialog(this, "Table is Empty");
            } else {
                //if row is not selected or multiple row is selected then 
                JOptionPane.showMessageDialog(this, "Please select SINGLE row to Update");
            }
        }
    }//GEN-LAST:event_updateBookingActionPerformed

    private void deleteBookingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBookingActionPerformed
        DefaultTableModel model = (DefaultTableModel) bookingFacility.getModel();
        
        //delete row
        if (bookingFacility.getSelectedRowCount() == 1){
            //if single row is selected then delete
            model.removeRow(bookingFacility.getSelectedRow());
            getData();
        } else {
            if (bookingFacility.getRowCount() == 0){
                //if table is empty (no data) then display message
                JOptionPane.showMessageDialog(this, "Table is Empty");
            } else {
                //if table is not empty but row is not selected or multiple row is selected
                JOptionPane.showMessageDialog(this, "Please select SINGLE row to Delete");
            }
        }
    }//GEN-LAST:event_deleteBookingActionPerformed

    public void getData(){
        File file = new File("src/main/java/assignment/assignment/TxtFile/FacilityBooking.txt");
        try {
            BufferedReader br = new BufferedReader(new FileReader(file));
            
            DefaultTableModel model = (DefaultTableModel) bookingFacility.getModel();
            
            Object [] dataRows = br.lines().toArray();
            for (int i = 1; i < dataRows.length; i++){
                String rec = dataRows[i].toString();
                String [] dataRow = rec.split(";");
                model.addRow(dataRow);
            }
            br.close();
        } catch (IOException ex) {
            Logger.getLogger(TenantFacilityBooking.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void writeData(){
        File file = new File("src/main/java/assignment/assignment/TxtFile/FacilityBooking.txt");
        try {
            BufferedWriter bw = new BufferedWriter(new FileWriter(file));
            DefaultTableModel model = (DefaultTableModel) bookingFacility.getModel();
            String colHeadings = "";
            for (int i = 1; i < model.getColumnCount(); i++) {
                colHeadings = colHeadings + model.getColumnName(i) + ";";
            }
            
            bw.write(colHeadings + "\n");
            String line = "";
            for (int row = 1; row < model.getRowCount(); row++){
                for (int col = 1; col < model.getColumnCount(); col++)
                    line = line + model.getValueAt(row,col) + ";";
                bw.write (line + "\n");
                line = "";
            }
            
            bw.close();
        } catch (IOException ex) {
            Logger.getLogger(TenantFacilityBooking.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TenantFacilityBooking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TenantFacilityBooking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TenantFacilityBooking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TenantFacilityBooking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField FacilityName_FacilityBooking;
    private javax.swing.JComboBox<String> TenantFacility_bookingtime1;
    private javax.swing.JComboBox<String> TenantFacility_bookingtime2;
    private javax.swing.JButton addBooking;
    private com.github.lgooddatepicker.components.DatePicker bookingDatePicker;
    private javax.swing.JTable bookingFacility;
    private javax.swing.JButton deleteBooking;
    private com.github.lgooddatepicker.components.TimePicker endTime;
    private javax.swing.JComboBox<String> facilityName;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private com.github.lgooddatepicker.components.TimePicker startTime;
    private javax.swing.JTextField tenantId;
    private javax.swing.JButton updateBooking;
    // End of variables declaration//GEN-END:variables
}
