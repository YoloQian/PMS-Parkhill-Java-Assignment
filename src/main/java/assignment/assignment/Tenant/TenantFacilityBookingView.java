package assignment.assignment.Tenant;

import assignment.assignment.User;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;



/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author leeyu
 */
public class TenantFacilityBookingView extends javax.swing.JFrame {
    private User user;
    private Tenant tenant;
    private String [] columnNames = {"FacilityBookingID", "FacilityName", "TenantID", "Booking Date", "StartTime", "EndTime"};
    private Object [] [] tableData;
    int count;
    int correctline;
    /**
     * Creates new form VisitorPassView
     */
    public TenantFacilityBookingView(User user) {
        this.user = user;
        getInfo(user);
        //Read data from text  file and create object [][] data
        List<Object[]> data = new ArrayList<>();
        try (BufferedReader br = new BufferedReader(new FileReader("src/main/java/assignment/assignment/TxtFile/FacilityBooking.txt"))) {
            String line;
            int lineNumber = 0;
            while ((line = br.readLine()) != null) {
                if (user.getRole().equals("tenant")) {
                    if (lineNumber > 0) {
                        String[] splitLine = line.split(";");
                        Object[] row = new Object[6];
                        if (tenant.getTenantID().equals(splitLine[2])) {
                            row[0] = splitLine[0];
                            row[1] = splitLine[1];
                            row[2] = splitLine[2];
                            row[3] = splitLine[3];
                            row[4] = splitLine[4];
                            row[5] = splitLine[5];
                            data.add(row);
                        }
                    }                        
                }else if (lineNumber > 0) { // Skip first line (header row)
                    String[] splitLine = line.split(";");
                    Object[] row = new Object[6];
                    row[0] = splitLine[0];
                    row[1] = splitLine[1];
                    row[2] = splitLine[2];
                    row[3] = splitLine[3];
                    row[4] = splitLine[4];
                    row[5] = splitLine[5];
                    data.add(row);
                }
                lineNumber++;
            }
        } catch (IOException e) {
        }
        tableData = data.toArray(new Object[data.size()][4]);
        initComponents();
        setLocationRelativeTo(null);
    }
    
    public void getInfo(User user) {
        try {
            File file = new File("src/main/java/assignment/assignment/TxtFile/TenantInfo.txt");         
            BufferedReader br = new BufferedReader(new FileReader(file));    
            String line;            

            while ((line = br.readLine()) != null) {
                String[] splitLine = line.split(";");
                if (splitLine[1].equals(Integer.toString(user.getUserId()))) {
                    this.tenant = new Tenant(user.getUserId(), user.getPassword(), user.getRole(),
                            user.getName(), user.getEmail(), splitLine[0], splitLine[2], splitLine[3]) {};
                    correctline = count;
                } else {
                    count++;
                }
            }
            br.close();
        }catch (IOException e) {
            System.out.println("fail");
            }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton3 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        AdminViewFacility = new javax.swing.JTable();
        UpdateBTN = new javax.swing.JButton();
        DeleteBTN = new javax.swing.JButton();
        NewBTN = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        BackBTN = new javax.swing.JButton();

        jButton3.setText("Delete");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        AdminViewFacility.setModel(new javax.swing.table.DefaultTableModel(tableData, columnNames
        ));
        jScrollPane1.setViewportView(AdminViewFacility);

        UpdateBTN.setText("Update");
        UpdateBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateBTNActionPerformed(evt);
            }
        });

        DeleteBTN.setText("Delete");
        DeleteBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteBTNActionPerformed(evt);
            }
        });

        NewBTN.setText("New");
        NewBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NewBTNActionPerformed(evt);
            }
        });

        jLabel1.setText("FacilityBooking");

        BackBTN.setText("BACK");
        BackBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackBTNActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 702, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(BackBTN)
                        .addGap(16, 16, 16)))
                .addContainerGap(17, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(153, 153, 153)
                .addComponent(NewBTN)
                .addGap(62, 62, 62)
                .addComponent(UpdateBTN)
                .addGap(77, 77, 77)
                .addComponent(DeleteBTN)
                .addGap(60, 227, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(BackBTN))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 57, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(UpdateBTN)
                    .addComponent(DeleteBTN)
                    .addComponent(NewBTN))
                .addGap(24, 24, 24))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void UpdateBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateBTNActionPerformed
        // TODO add your handling code here:
        // Get selected row index
        int row = AdminViewFacility.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) AdminViewFacility.getModel();
        if (row == -1) {
            JOptionPane.showMessageDialog(this, "Please select a row to update", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        
        
        // Get the data from the selected row in the table
        String FacilityBookingid = (String) AdminViewFacility.getValueAt(row, 0);
        String facilityname = (String) AdminViewFacility.getValueAt(row, 1);
        String tenantid = (String) AdminViewFacility.getValueAt(row, 2);
        String bookingdate = (String) AdminViewFacility.getValueAt(row, 3);
        String starttime = (String) AdminViewFacility.getValueAt(row, 4);
        String endtime = (String) AdminViewFacility.getValueAt(row, 5);

        // Display a dialog to allow the user to update the data
        String updatefacilityname = JOptionPane.showInputDialog(this, "Facility Updated", facilityname);
        if (updatefacilityname == null || updatefacilityname.isEmpty()) {
            return; // User clicked cancel or entered empty input, do nothing
        }

        // Validate the updated data
        if (updatefacilityname.contains(";")) {
            JOptionPane.showMessageDialog(this, "Please remove semicolons (;) from input", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Display a dialog to allow the user to update the data
        String updatebookingdate = JOptionPane.showInputDialog(this, "Date updated", bookingdate);
        if (updatebookingdate == null || updatebookingdate.isEmpty()) {
            return; // User clicked cancel or entered empty input, do nothing
        }

        // Validate the updated data
        if (updatebookingdate.contains(";")) {
            JOptionPane.showMessageDialog(this, "Please remove semicolons (;) from input", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        // Display a dialog to allow the user to update the data
        String updatestartime = JOptionPane.showInputDialog(this, "Start Time updated", starttime);
        if (updatestartime == null || updatestartime.isEmpty()) {
            return; // User clicked cancel or entered empty input, do nothing
        }

        // Validate the updated data
        if (updatestartime.contains(";")) {
            JOptionPane.showMessageDialog(this, "Please remove semicolons (;) from input", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        // Display a dialog to allow the user to update the data
        String updateendtime = JOptionPane.showInputDialog(this, "Facilityid updated", endtime);
        if (updateendtime == null || updateendtime.isEmpty()) {
            return; // User clicked cancel or entered empty input, do nothing
        }

        // Validate the updated data
        if (updateendtime.contains(";")) {
            JOptionPane.showMessageDialog(this, "Please remove semicolons (;) from input", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try (BufferedReader file = new BufferedReader(new FileReader("src/main/java/assignment/assignment/TxtFile/FacilityBooking.txt"))) {
            StringBuilder inputBuffer = new StringBuilder();
            String line;
            while ((line = file.readLine()) != null) {
                String[] parts = line.split(";");
                System.out.println(Arrays.toString(parts));

                if (FacilityBookingid.equals(parts[0]) && facilityname.equals(parts[1]) && tenantid.equals(parts[2]) && bookingdate.equals(parts[3])
                        && starttime.equals(parts[4]) && endtime.equals(parts[5])) {
                   line = FacilityBookingid + ";" + updatefacilityname + ";" + tenantid + ";" + updatebookingdate + ";" + updatestartime + ";" + updateendtime;                   
                    model.setValueAt(updatefacilityname, row, 1); // Update the table cell with the new data
                    model.setValueAt(updatebookingdate, row, 3);
                    model.setValueAt(updatestartime, row, 4);// Update the table cell with the new data
                    model.setValueAt(updateendtime, row, 5);// Update the table cell with the new data
                }
                inputBuffer.append(line);
                inputBuffer.append('\n');
            }
            
        
            file.close();

            // Write the modified string to the same file
            FileOutputStream fileOut = new FileOutputStream("src/main/java/assignment/assignment/TxtFile/FacilityBooking.txt");
            fileOut.write(inputBuffer.toString().getBytes());
            fileOut.close();
            JOptionPane.showMessageDialog(this, "FacilityBooking updated successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error writing to file", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_UpdateBTNActionPerformed

    private void DeleteBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteBTNActionPerformed
        // TODO add your handling code here:
        // Get selected row index
        int selectedRow = AdminViewFacility.getSelectedRow();

        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a row to delete", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
                // Get the data from the selected row in the table
        String FacilityBookingid = (String) AdminViewFacility.getValueAt(selectedRow, 0);
        String facilityname = (String) AdminViewFacility.getValueAt(selectedRow, 1);
        String tenantid = (String) AdminViewFacility.getValueAt(selectedRow, 2);
        String bookingdate = (String) AdminViewFacility.getValueAt(selectedRow, 3);
        String starttime = (String) AdminViewFacility.getValueAt(selectedRow, 4);
        String endtime = (String) AdminViewFacility.getValueAt(selectedRow, 5);
        DefaultTableModel model = (DefaultTableModel) AdminViewFacility.getModel();
        model.removeRow(selectedRow);
        List<String> data = new ArrayList<>();
        try (BufferedReader br = new BufferedReader(new FileReader("src/main/java/assignment/assignment/TxtFile/FacilityBooking.txt"))) {
            String line;
            while ((line = br.readLine()) != null) {
                data.add(line);
                String[] parts = line.split(";");
                if (FacilityBookingid.equals(parts[0]) && facilityname.equals(parts[1]) && tenantid.equals(parts[2]) && bookingdate.equals(parts[3])
                        && starttime.equals(parts[4]) && endtime.equals(parts[5])) {
                   data.remove(line);
                }
            }

            br.close();

            BufferedWriter writer = new BufferedWriter(new FileWriter("src/main/java/assignment/assignment/TxtFile/FacilityBooking.txt"));
            for (String updatedLine : data) {
                writer.write(updatedLine);
                writer.newLine();
            }
            writer.close();
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error deleting row", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_DeleteBTNActionPerformed

    private void NewBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NewBTNActionPerformed
        // TODO add your handling code here:
        new TenantFBookingAdd(user).setVisible(true);
        dispose();
    }//GEN-LAST:event_NewBTNActionPerformed

    private void BackBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackBTNActionPerformed
        new TenantMainFrame(user).setVisible(true);
        dispose();
    }//GEN-LAST:event_BackBTNActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TenantFacilityBookingView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TenantFacilityBookingView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TenantFacilityBookingView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TenantFacilityBookingView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
//                new TenantFacilityBookingView().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable AdminViewFacility;
    private javax.swing.JButton BackBTN;
    private javax.swing.JButton DeleteBTN;
    private javax.swing.JButton NewBTN;
    private javax.swing.JButton UpdateBTN;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
