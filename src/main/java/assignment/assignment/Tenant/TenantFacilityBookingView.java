package assignment.assignment.Tenant;

import assignment.assignment.User;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;



/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author leeyu
 */
public class TenantFacilityBookingView extends javax.swing.JFrame {
    private User user;
    private String[] columnNames = {"FacilityBookingID", "Facility ID", "FacilityName",
                                    "Tenant ID", "Booking Date", "Start Date", "End Date"}; //top string
    private Object[][] tableData;
    /**
     * Creates new form VisitorPassView
     */
    public TenantFacilityBookingView(User user) {
        this.user = user;
                
                
        List<Object[]> data = new ArrayList<>();
        try (BufferedReader br = new BufferedReader(new FileReader("src/main/java/assignment/assignment/TxtFile/FacilityBooking.txt"))) {
            String line;
            int lineNumber = 0;
            while ((line = br.readLine()) != null) {  //this is from txt file
                if (lineNumber > 0) { // Skip first line (header row)
                    String[] splitLine = line.split(";");
                    Object[] row = new Object[7];  //this will be 7
                    row[0] = splitLine[0];
                    row[1] = splitLine[1];
                    row[2] = splitLine[2];
                    row[3] = splitLine[3];
                    row[4] = splitLine[4];
                    row[5] = splitLine[5];
                    row[6] = splitLine[6];
                    data.add(row);
                }
                lineNumber++;
            }
        } catch (IOException e) {
        }
        tableData = data.toArray(new Object[data.size()][7]);  //put 7 also
        initComponents();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton3 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        AdminViewFacility = new javax.swing.JTable();
        UpdateBTN = new javax.swing.JButton();
        DeleteBTN = new javax.swing.JButton();
        NewBTN = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        BackBTN = new javax.swing.JButton();

        jButton3.setText("Delete");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        AdminViewFacility.setModel(new javax.swing.table.DefaultTableModel(tableData, columnNames
        ));
        jScrollPane1.setViewportView(AdminViewFacility);

        UpdateBTN.setText("Update");
        UpdateBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateBTNActionPerformed(evt);
            }
        });

        DeleteBTN.setText("Delete");
        DeleteBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteBTNActionPerformed(evt);
            }
        });

        NewBTN.setText("New");
        NewBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NewBTNActionPerformed(evt);
            }
        });

        jLabel1.setText("FacilityBooking");

        BackBTN.setText("BACK");
        BackBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackBTNActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(153, 153, 153)
                        .addComponent(NewBTN)
                        .addGap(62, 62, 62)
                        .addComponent(UpdateBTN)
                        .addGap(77, 77, 77)
                        .addComponent(DeleteBTN))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 702, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(BackBTN)
                                .addGap(16, 16, 16)))))
                .addContainerGap(17, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(BackBTN))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 57, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(UpdateBTN)
                    .addComponent(DeleteBTN)
                    .addComponent(NewBTN))
                .addGap(24, 24, 24))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void UpdateBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateBTNActionPerformed
        // TODO add your handling code here:
        // Get selected row index
        int row = AdminViewFacility.getSelectedRow();
        if (row == -1) {
            JOptionPane.showMessageDialog(this, "Please select a row to update", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        // Get the data from the selected row in the table
        String FacilityBookingid = (String) AdminViewFacility.getValueAt(row, 0);
        String Facilityid = (String) AdminViewFacility.getValueAt(row, 1);
        String facilityname = (String) AdminViewFacility.getValueAt(row, 2);
        String tenantid = (String) AdminViewFacility.getValueAt(row, 3);
        String bookingdate = (String) AdminViewFacility.getValueAt(row, 4);
        String starttime = (String) AdminViewFacility.getValueAt(row, 5);
        String endtime = (String) AdminViewFacility.getValueAt(row, 6);

        // Display a dialog to allow the user to update the data
        String updatefacilityname = JOptionPane.showInputDialog(this, "Facility Updated", facilityname);
        if (updatefacilityname == null || updatefacilityname.isEmpty()) {
            return; // User clicked cancel or entered empty input, do nothing
        }

        // Validate the updated data
        if (updatefacilityname.contains(";")) {
            JOptionPane.showMessageDialog(this, "Please remove semicolons (;) from input", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Display a dialog to allow the user to update the data
        String updatebookingdate = JOptionPane.showInputDialog(this, "Date updated", bookingdate);
        if (updatebookingdate == null || updatebookingdate.isEmpty()) {
            return; // User clicked cancel or entered empty input, do nothing
        }

        // Validate the updated data
        if (updatebookingdate.contains(";")) {
            JOptionPane.showMessageDialog(this, "Please remove semicolons (;) from input", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        // Display a dialog to allow the user to update the data
        String updatestartime = JOptionPane.showInputDialog(this, "Start Time updated", starttime);
        if (updatestartime == null || updatestartime.isEmpty()) {
            return; // User clicked cancel or entered empty input, do nothing
        }

        // Validate the updated data
        if (updatestartime.contains(";")) {
            JOptionPane.showMessageDialog(this, "Please remove semicolons (;) from input", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        // Display a dialog to allow the user to update the data
        String updateendtime = JOptionPane.showInputDialog(this, "Facilityid updated", endtime);
        if (updateendtime == null || updateendtime.isEmpty()) {
            return; // User clicked cancel or entered empty input, do nothing
        }

        // Validate the updated data
        if (updateendtime.contains(";")) {
            JOptionPane.showMessageDialog(this, "Please remove semicolons (;) from input", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try (BufferedWriter writer = new BufferedWriter(new FileWriter("src/main/java/assignment/assignment/TxtFile/FacilityBooking.txt"))) {
            DefaultTableModel model = (DefaultTableModel) AdminViewFacility.getModel();

            // Write the first row 
            writer.write("FacilityBookingID;Facility ID;FacilityName;Tenant ID;Booking Date;Start time;End Time");
            writer.newLine();

            // Loop through the other rows and write them to the file
            for (int i = 0; i < model.getRowCount(); i++) {
                if (i == row) {
                    // Update the selected row with the new data
                    writer.write(updatefacilityname + ";" + updatebookingdate + ";" + updatestartime + ";" + updateendtime);
                    model.setValueAt(updatefacilityname, i, 2); // Update the table cell with the new data
                    model.setValueAt(updatebookingdate, i, 4); // Update the table cell with the new data
                    model.setValueAt(updatestartime, i, 5); // Update the table cell with the new data
                    model.setValueAt(updateendtime, i, 6); // Update the table cell with the new data
                } else {
                    // Write the other rows back to the file unchanged
                    String rowfacilityname = (String) model.getValueAt(i, 2);
                    String rowbookingdate = (String) model.getValueAt(i, 4);
                    String rowstartime = (String) model.getValueAt(i, 5);
                    String rowendtime = (String) model.getValueAt(i, 6);
                    writer.write(rowfacilityname + ";" + rowbookingdate + ";" + rowstartime + ";" + rowendtime);
                }
                writer.newLine();
            }
            JOptionPane.showMessageDialog(this, "Booking updated successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error writing to file", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_UpdateBTNActionPerformed

    private void DeleteBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteBTNActionPerformed
        // get the index of the selected row
        int selectedRow = AdminViewFacility.getSelectedRow();
        
        //check if a row is selected
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a row to delete", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        //confirm deletion
        int confirmDelete = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this entry?", "Confirm Deletion", JOptionPane.YES_NO_OPTION);
        if (confirmDelete == JOptionPane.NO_OPTION){
            return;
        }
        
        //create a new temporary file
        File FacilityTempFile = new File("src/main/java/assignment/assignment/TxtFile/FacilityTemp.txt");
        
        try (BufferedReader reader = new BufferedReader(new FileReader("src/main/java/assignment/assignment/TxtFile/FacilityBooking.txt"));
             FileOutputStream fos = new FileOutputStream(FacilityTempFile);
             PrintWriter writer = new PrintWriter(fos)) {

            String line;
            int currentRow = 0;
            while ((line = reader.readLine()) != null) {
                // check if this is the selected row to delete
                if (currentRow == selectedRow) {
                    // skip this line
                    currentRow++;
                    continue;
                }
                // write the line to the temporary file
                writer.println(line);
                currentRow++;
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error deleting entry", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        // delete the original file
        File originalFile = new File("src/main/java/assignment/assignment/TxtFile/FacilityBooking.txt");
        if (!originalFile.delete()) {
            JOptionPane.showMessageDialog(this, "Error deleting entry", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        //rename the temporary file to the original file
        if (!FacilityTempFile.renameTo(originalFile)) {
            JOptionPane.showMessageDialog(this, "Error deleting entry", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        //update the table model
        DefaultTableModel model = (DefaultTableModel) AdminViewFacility.getModel();
        model.removeRow(selectedRow);

        JOptionPane.showMessageDialog(this, "Entry deleted successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_DeleteBTNActionPerformed

    private void NewBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NewBTNActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_NewBTNActionPerformed

    private void BackBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackBTNActionPerformed
        new TenantMainFrame(user).setVisible(true);
        dispose();
    }//GEN-LAST:event_BackBTNActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TenantFacilityBookingView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TenantFacilityBookingView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TenantFacilityBookingView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TenantFacilityBookingView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
//                new TenantFacilityBookingView().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable AdminViewFacility;
    private javax.swing.JButton BackBTN;
    private javax.swing.JButton DeleteBTN;
    private javax.swing.JButton NewBTN;
    private javax.swing.JButton UpdateBTN;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
