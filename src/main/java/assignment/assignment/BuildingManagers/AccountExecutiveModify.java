/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package assignment.assignment.BuildingManagers;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author user
 */
public class AccountExecutiveModify extends javax.swing.JFrame {

    /**
     * Creates new form Accountexecutivemodify
     */
    public AccountExecutiveModify() {
        initComponents();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        backBTN = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        accountexecutivemodifyTABLE = new javax.swing.JTable();
        accountexecutivemodifyLABEL = new javax.swing.JLabel();
        deleteBTN = new javax.swing.JButton();
        accountexecutivesearchPANEL = new javax.swing.JPanel();
        searchidLABEL = new javax.swing.JLabel();
        searchidTF = new javax.swing.JTextField();
        searchidBTN = new javax.swing.JButton();
        showaccountexecutive = new javax.swing.JButton();
        modifyBTN = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        backBTN.setText("Back");
        backBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBTNActionPerformed(evt);
            }
        });

        accountexecutivemodifyTABLE.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "UserID", "Name", "Email", "Password"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(accountexecutivemodifyTABLE);

        accountexecutivemodifyLABEL.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        accountexecutivemodifyLABEL.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        accountexecutivemodifyLABEL.setText("Account Executive Modify");

        deleteBTN.setText("Delete");
        deleteBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBTNActionPerformed(evt);
            }
        });

        accountexecutivesearchPANEL.setBorder(javax.swing.BorderFactory.createTitledBorder("Search"));

        searchidLABEL.setText("Search ID:");

        searchidBTN.setText("Search ID");
        searchidBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchidBTNActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout accountexecutivesearchPANELLayout = new javax.swing.GroupLayout(accountexecutivesearchPANEL);
        accountexecutivesearchPANEL.setLayout(accountexecutivesearchPANELLayout);
        accountexecutivesearchPANELLayout.setHorizontalGroup(
            accountexecutivesearchPANELLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(accountexecutivesearchPANELLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(accountexecutivesearchPANELLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(accountexecutivesearchPANELLayout.createSequentialGroup()
                        .addComponent(searchidLABEL, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchidTF, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, accountexecutivesearchPANELLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(searchidBTN)))
                .addContainerGap())
        );
        accountexecutivesearchPANELLayout.setVerticalGroup(
            accountexecutivesearchPANELLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(accountexecutivesearchPANELLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(accountexecutivesearchPANELLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchidLABEL)
                    .addComponent(searchidTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchidBTN)
                .addContainerGap(49, Short.MAX_VALUE))
        );

        showaccountexecutive.setText("Show Account Executive");
        showaccountexecutive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showaccountexecutiveActionPerformed(evt);
            }
        });

        modifyBTN.setText("Modify");
        modifyBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifyBTNActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(accountexecutivemodifyLABEL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(backBTN))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 743, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(accountexecutivesearchPANEL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(modifyBTN)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(showaccountexecutive))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(deleteBTN)
                                        .addGap(0, 0, Short.MAX_VALUE)))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(accountexecutivemodifyLABEL, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(backBTN))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(accountexecutivesearchPANEL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(showaccountexecutive)
                                .addGap(33, 33, 33))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(modifyBTN)
                                .addGap(18, 18, 18)))
                        .addComponent(deleteBTN)))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBTNActionPerformed
        // TODO add your handling code here:
        UserManagementMenu UserManagementMenu = new UserManagementMenu();
        this.dispose();
        UserManagementMenu.setVisible(true);
    }//GEN-LAST:event_backBTNActionPerformed

    private void showaccountexecutiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showaccountexecutiveActionPerformed
        // TODO add your handling code here:
        try {
            File userInfoFile = new File("src/main/java/assignment/assignment/TxtFile/UserInfo.txt");
            File accountexeInfoFile = new File("src/main/java/assignment/assignment/TxtFile/AccountExecutiveInfo.txt");
            FileReader userInfoReader = new FileReader(userInfoFile);
            FileReader accountexeInfoReader = new FileReader(accountexeInfoFile);
            BufferedReader userInfoBR = new BufferedReader(userInfoReader);
            BufferedReader accountexeInfoBR = new BufferedReader(accountexeInfoReader);
            String userInfoLine, accountexeInfoLine;
            DefaultTableModel model = (DefaultTableModel) accountexecutivemodifyTABLE.getModel();
            model.setRowCount(0);
            userInfoBR.readLine(); // Skip header row in UserInfo.txt
            accountexeInfoBR.readLine(); // Skip header row in TenantInfo.txt
            while ((userInfoLine = userInfoBR.readLine()) != null) {
                String[] userInfoData = userInfoLine.split(";");
                while ((accountexeInfoLine = accountexeInfoBR.readLine()) != null) {
                    String[] accountexeInfoData = accountexeInfoLine.split(";");
                    if (accountexeInfoData[1].equals(userInfoData[0])) { // Match UserID
                        Object[] row = {userInfoData[0], userInfoData[3], userInfoData[4], userInfoData[1] };
                        model.addRow(row);
                        break; // Exit tenantInfo loop when match is found
                    }
                }
                accountexeInfoBR.close();
                accountexeInfoReader = new FileReader(accountexeInfoFile); // Reset tenantInfoReader
                accountexeInfoBR = new BufferedReader(accountexeInfoReader); // Reset tenantInfoBR
                accountexeInfoBR.readLine(); // Skip header row in TenantInfo.txt
            }
            userInfoBR.close();
            userInfoReader.close();
            accountexeInfoBR.close();
            accountexeInfoReader.close();
        } catch (IOException e) {
            System.out.println("Error: " + e.getMessage());
        }
    }//GEN-LAST:event_showaccountexecutiveActionPerformed

    private void searchidBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchidBTNActionPerformed
        // TODO add your handling code here:
        String searchUserID = searchidTF.getText();
        DefaultTableModel model = (DefaultTableModel) accountexecutivemodifyTABLE.getModel();
        int rowCount = model.getRowCount();
        boolean userFound = false;
        for (int i = 0; i < rowCount; i++) {
            if (model.getValueAt(i, 0).equals(searchUserID)) {
                accountexecutivemodifyTABLE.setRowSelectionInterval(i, i);
                userFound = true;
                break;
            }
        }
        if (!userFound) {
            JOptionPane.showMessageDialog(this, "User with ID " + searchUserID + " not found!");
        }
    }//GEN-LAST:event_searchidBTNActionPerformed

    private void deleteBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBTNActionPerformed
        // TODO add your handling code here:
        int selectedRow = accountexecutivemodifyTABLE.getSelectedRow();
        if (selectedRow != -1) {
            DefaultTableModel model = (DefaultTableModel) accountexecutivemodifyTABLE.getModel();
            model.removeRow(selectedRow);
            // save the updated data back to the file
            try (FileWriter fw = new FileWriter("AccountExecutiveInfo.txt");
                 BufferedWriter bw = new BufferedWriter(fw);
                 PrintWriter pw = new PrintWriter(bw)) {
                for (int i = 0; i < model.getRowCount(); i++) {
                    for (int j = 0; j < model.getColumnCount(); j++) {
                        pw.print(model.getValueAt(i, j));
                        if (j != model.getColumnCount() - 1) {
                            pw.print(";");
                        }
                    }
                    pw.println();
                }
            } catch (IOException e) {
            }
        }
    }//GEN-LAST:event_deleteBTNActionPerformed

    private void modifyBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifyBTNActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_modifyBTNActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AccountExecutiveModify.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AccountExecutiveModify.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AccountExecutiveModify.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AccountExecutiveModify.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AccountExecutiveModify().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel accountexecutivemodifyLABEL;
    private javax.swing.JTable accountexecutivemodifyTABLE;
    private javax.swing.JPanel accountexecutivesearchPANEL;
    private javax.swing.JButton backBTN;
    private javax.swing.JButton deleteBTN;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton modifyBTN;
    private javax.swing.JButton searchidBTN;
    private javax.swing.JLabel searchidLABEL;
    private javax.swing.JTextField searchidTF;
    private javax.swing.JButton showaccountexecutive;
    // End of variables declaration//GEN-END:variables
}
