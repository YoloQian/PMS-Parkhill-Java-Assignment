package assignment.assignment.Vendor;

import assignment.assignment.Tenant.*;
import static assignment.assignment.Tenant.TenantViewProfile.getInfo;
import assignment.assignment.User;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;



/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author leeyu
 */
public class VendorViewComplaint extends javax.swing.JFrame {
    private User user;
    private Tenant tenant;
    private String[] columnNames = {"ComplaintID" , "UserID" , "ComplaintDate" , "Subject" , "Name" , "Description" , "Reply" , "Status"};
    private Object[][] tableData;

    /**
     * Creates new form VisitorPassView
     */
    public VendorViewComplaint(User user) {
        this.user = user;
        getInfo(user);
        // Read data from text file and create Object[][] data
        List<Object[]> data = new ArrayList<>();
        try (BufferedReader br = new BufferedReader(new FileReader("src/main/java/assignment/assignment/TxtFile/Complaint.txt"))) {
            String line;
            int lineNumber = 0;
            while ((line = br.readLine()) != null) {
                if (lineNumber > 0) {
                    String[] splitLine = line.split(";");
                    Object[] row = new Object[8];
                    if (Integer.toString(user.getUserId()).equals(splitLine[1])) {
                        row[0] = splitLine[0];
                        row[1] = splitLine[1];
                        row[2] = splitLine[2];
                        row[3] = splitLine[3];
                        row[4] = splitLine[4];
                        row[5] = splitLine[5];
                        row[6] = splitLine[6];
                        row[7] = splitLine[7];
                        data.add(row);
                    }
                }
                lineNumber++;
            }
        } catch (IOException e) {
        }
        tableData = data.toArray(new Object[data.size()][8]);
        initComponents();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton3 = new javax.swing.JButton();
        AdminImportComplaintData2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        VendorViewComplaint = new javax.swing.JTable();
        backBtn = new javax.swing.JButton();
        VendorUpdateComplaint = new javax.swing.JButton();
        VendorDeleteComplaint = new javax.swing.JButton();

        jButton3.setText("Delete");

        AdminImportComplaintData2.setText("Update");
        AdminImportComplaintData2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AdminImportComplaintData2ActionPerformed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        VendorViewComplaint.setModel(new javax.swing.table.DefaultTableModel(tableData, columnNames
        ));
        VendorViewComplaint.setDefaultEditor(Object.class, null); // this makes the table non-editable
        VendorViewComplaint.setRowSelectionAllowed(true); // this allows the rows to be selected);
    jScrollPane1.setViewportView(VendorViewComplaint);

    backBtn.setText("Close");
    backBtn.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            backBtnActionPerformed(evt);
        }
    });

    VendorUpdateComplaint.setText("Update");
    VendorUpdateComplaint.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            VendorUpdateComplaintActionPerformed(evt);
        }
    });

    VendorDeleteComplaint.setText("Delete");
    VendorDeleteComplaint.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            VendorDeleteComplaintActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 768, Short.MAX_VALUE))
                .addGroup(layout.createSequentialGroup()
                    .addGap(252, 252, 252)
                    .addComponent(VendorUpdateComplaint)
                    .addGap(101, 101, 101)
                    .addComponent(VendorDeleteComplaint)
                    .addGap(0, 0, Short.MAX_VALUE))
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(backBtn)
                    .addGap(29, 29, 29)))
            .addContainerGap())
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addContainerGap(18, Short.MAX_VALUE)
            .addComponent(backBtn)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(18, 18, 18)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(VendorUpdateComplaint)
                .addComponent(VendorDeleteComplaint))
            .addGap(20, 20, 20))
    );

    pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        // TODO add your handling code here:
        new TenantComplaintManagement(user).setVisible(true);
        dispose();
    }//GEN-LAST:event_backBtnActionPerformed

    private void VendorUpdateComplaintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VendorUpdateComplaintActionPerformed
        // TODO add your handling code here:
        // Get selected row index
        int row = VendorViewComplaint.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) VendorViewComplaint.getModel();
        String ComplaintID = (String) VendorViewComplaint.getValueAt(row, 0);
        String Description = (String) VendorViewComplaint.getValueAt(row, 5);
        
        if (row == -1) {
            JOptionPane.showMessageDialog(this, "Please select a row to update", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }                
        // Get the data from the selected row in the table


        // Display a dialog to allow the user to update the data
        String updatedDescription = JOptionPane.showInputDialog(this, "Update Description", Description);
        if (updatedDescription == null || updatedDescription.isEmpty()) {
            return; // User clicked cancel or entered empty input, do nothing
        }

        // Validate the updated data
        if (updatedDescription.contains(";")) {
            JOptionPane.showMessageDialog(this, "Please remove semicolons (;) from input", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try (BufferedReader file = new BufferedReader(new FileReader("src/main/java/assignment/assignment/TxtFile/Complaint.txt"))) {
            StringBuilder inputBuffer = new StringBuilder();
            String line;
            while ((line = file.readLine()) != null) {
                String[] parts = line.split(";");
                System.out.println(ComplaintID);
                if (ComplaintID.equals(parts[0])) {
                   line = parts[0] + ";" + parts[1] + ";" + parts[2] + ";" + parts[3] + ";" + parts[4] + ";" + updatedDescription + ";" + parts[6] + ";" + parts[7];                   
                   model.setValueAt(updatedDescription, row, 5); // Update the table cell with the new data
                }
                inputBuffer.append(line);
                inputBuffer.append('\n');
            }
            
        
            file.close();

            // Write the modified string to the same file
            FileOutputStream fileOut = new FileOutputStream("src/main/java/assignment/assignment/TxtFile/Complaint.txt");
            fileOut.write(inputBuffer.toString().getBytes());
            fileOut.close();
            JOptionPane.showMessageDialog(this, "Complaint updated successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error writing to file", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_VendorUpdateComplaintActionPerformed

    private void AdminImportComplaintData2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AdminImportComplaintData2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_AdminImportComplaintData2ActionPerformed

    private void VendorDeleteComplaintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VendorDeleteComplaintActionPerformed
        // TODO add your handling code here:
                // TODO add your handling code here:
        // Get selected row index
        int selectedRow = VendorViewComplaint.getSelectedRow();
        
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a row to delete", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
                // Get the data from the selected row in the table
        String ComplaintID = (String) VendorViewComplaint.getValueAt(selectedRow, 0);
        DefaultTableModel model = (DefaultTableModel) VendorViewComplaint.getModel();
        model.removeRow(selectedRow);
        List<String> data = new ArrayList<>();
        try (BufferedReader br = new BufferedReader(new FileReader("src/main/java/assignment/assignment/TxtFile/Complaint.txt"))) {
            String line;
            while ((line = br.readLine()) != null) {
                data.add(line);
                String[] parts = line.split(";");
                if (ComplaintID.equals(parts[0])) {
                   data.remove(line);
                }
            }
            
            br.close();

            BufferedWriter writer = new BufferedWriter(new FileWriter("src/main/java/assignment/assignment/TxtFile/Complaint.txt"));
            for (String updatedLine : data) {
                writer.write(updatedLine);
                writer.newLine();
            }
            writer.close();
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error deleting row", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_VendorDeleteComplaintActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */


        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new TenantViewComplaint(user).setVisible(true);
//            }
//        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AdminImportComplaintData2;
    private javax.swing.JButton VendorDeleteComplaint;
    private javax.swing.JButton VendorUpdateComplaint;
    private javax.swing.JTable VendorViewComplaint;
    private javax.swing.JButton backBtn;
    private javax.swing.JButton jButton3;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
